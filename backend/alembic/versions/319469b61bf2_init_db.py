"""init db

Revision ID: 319469b61bf2
Revises: 
Create Date: 2025-05-30 20:22:37.490934

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '319469b61bf2'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('messages',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('uuid', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=True),
    sa.Column('session_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('role', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('type', sa.VARCHAR(length=16), server_default=sa.text("'text'::character varying"), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=16), server_default=sa.text("'ok'::character varying"), autoincrement=False, nullable=True),
    sa.Column('content', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('usage_tokens', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('meta', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_deleted', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['session_id'], ['sessions.id'], name=op.f('messages_session_id_fkey'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('messages_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('messages_pkey')),
    sa.UniqueConstraint('uuid', name=op.f('messages_uuid_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_index(op.f('idx_messages_user_id'), 'messages', ['user_id'], unique=False)
    op.create_index(op.f('idx_messages_type'), 'messages', ['type'], unique=False)
    op.create_index(op.f('idx_messages_session_id'), 'messages', ['session_id'], unique=False)
    op.create_index(op.f('idx_messages_created_at'), 'messages', ['created_at'], unique=False)
    op.create_table('sessions',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('sessions_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('uuid', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('session_token', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('ip_address', postgresql.INET(), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('last_active_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='sessions_user_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='sessions_pkey'),
    sa.UniqueConstraint('session_token', name='sessions_session_token_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('uuid', name='sessions_uuid_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_sessions_user_id'), 'sessions', ['user_id'], unique=False)
    op.create_index(op.f('idx_sessions_token'), 'sessions', ['session_token'], unique=False)
    op.create_index(op.f('idx_sessions_active'), 'sessions', ['is_active'], unique=False)
    op.create_table('error_logs',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('session_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('error_code', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('stacktrace', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('component', sa.VARCHAR(length=32), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['session_id'], ['sessions.id'], name=op.f('error_logs_session_id_fkey'), ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('error_logs_user_id_fkey'), ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id', name=op.f('error_logs_pkey'))
    )
    op.create_index(op.f('idx_errorlogs_user_id'), 'error_logs', ['user_id'], unique=False)
    op.create_index(op.f('idx_errorlogs_session_id'), 'error_logs', ['session_id'], unique=False)
    op.create_table('users',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('users_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('uuid', sa.UUID(), server_default=sa.text('uuid_generate_v4()'), autoincrement=False, nullable=True),
    sa.Column('username', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('display_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('email', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('auth_provider', sa.VARCHAR(length=32), server_default=sa.text("'local'::character varying"), autoincrement=False, nullable=False),
    sa.Column('provider_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('roles', postgresql.ARRAY(sa.TEXT()), server_default=sa.text("ARRAY['user'::text]"), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('is_staff', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_admin', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('is_flagged', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('invite_token', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('referral_code', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('refresh_token', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('language', sa.VARCHAR(length=8), server_default=sa.text("'ru'::character varying"), autoincrement=False, nullable=True),
    sa.Column('timezone', sa.VARCHAR(length=64), autoincrement=False, nullable=True),
    sa.Column('last_login', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('last_activity', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('login_attempts', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('login_history', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('user_score', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True),
    sa.Column('custom_settings', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('notifications_enabled', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=True),
    sa.Column('tags', postgresql.ARRAY(sa.TEXT()), autoincrement=False, nullable=True),
    sa.Column('blocked_until', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('deleted_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='users_pkey'),
    sa.UniqueConstraint('email', 'auth_provider', name='users_email_auth_provider_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('username', 'auth_provider', name='users_username_auth_provider_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    sa.UniqueConstraint('uuid', name='users_uuid_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_index(op.f('idx_users_username'), 'users', ['username'], unique=False)
    op.create_index(op.f('idx_users_tags'), 'users', ['tags'], unique=False)
    op.create_index(op.f('idx_users_referral'), 'users', ['referral_code'], unique=False)
    op.create_index(op.f('idx_users_provider'), 'users', ['auth_provider', 'provider_id'], unique=False)
    op.create_index(op.f('idx_users_email'), 'users', ['email'], unique=False)
    op.create_table('subscriptions',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    sa.Column('plan', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('cancelled_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('payment_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('payment_method', sa.VARCHAR(length=32), autoincrement=False, nullable=True),
    sa.Column('auto_renew', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('subscriptions_user_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('subscriptions_pkey'))
    )
    op.create_index(op.f('idx_subscriptions_user_id'), 'subscriptions', ['user_id'], unique=False)
    op.create_index(op.f('idx_subscriptions_status'), 'subscriptions', ['status'], unique=False)
    # ### end Alembic commands ###
