from fastapi import Request, HTTPException, status
from fastapi_users import FastAPIUsers
from fastapi_users.authentication import JWTStrategy, CookieTransport, AuthenticationBackend
from backend.models import User, Subscription
import uuid
from backend.config import SECRET_KEY, SESSION_COOKIE_NAME, SECURE_COOKIES
from sqlalchemy.future import select
from backend.database import SessionLocal
from backend.user_manager import get_user_manager

def get_jwt_strategy():
    return JWTStrategy(secret=SECRET_KEY, lifetime_seconds=60 * 60 * 24 * 7, token_audience="fastapi-users")

cookie_transport = CookieTransport(
    cookie_name=SESSION_COOKIE_NAME,
    cookie_max_age=60 * 60 * 24 * 7,
    cookie_secure=SECURE_COOKIES,
    cookie_httponly=True,
    cookie_samesite="lax"
)

auth_backend = AuthenticationBackend(
    name="jwt",
    transport=cookie_transport,
    get_strategy=get_jwt_strategy,
)

# –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä FastAPIUsers –±–µ–∑ —Å—Ö–µ–º ‚Äî —Ç—ã –∏—Ö –∑–∞–¥–∞—ë—à—å –≤ main.py –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
fastapi_users = FastAPIUsers[User, uuid.UUID](get_user_manager, [auth_backend])

# –§—É–Ω–∫—Ü–∏—è –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ ‚Äî –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤—Ä—É—á–Ω—É—é
def decode_jwt_token(token: str):
    from jose import jwt, JWTError
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=["HS256"])
        return payload
    except JWTError:
        raise HTTPException(
            status_code=status.HTTP_401_UNAUTHORIZED,
            detail="–£–ø—Å, –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ AI –Ω—É–∂–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∞",
            headers={"WWW-Authenticate": "Bearer"},
        )

# üî• –ì–ª–∞–≤–Ω–æ–µ: –±–µ–∑–æ–ø–∞—Å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏ –ë–ï–ó Depends(current_user)
async def require_active_subscription(request: Request):
    user = await fastapi_users.current_user(active=True)(request)

    async with SessionLocal() as session:
        result = await session.execute(
            select(Subscription)
            .where(Subscription.user_id == user.id)
            .where(Subscription.status == "active")
        )
        subscription = result.scalar_one_or_none()
        if not subscription:
            raise HTTPException(
                status_code=status.HTTP_402_PAYMENT_REQUIRED,
                detail="–£–ø—Å! –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É Leadinc –Ω—É–∂–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ üòá",
            )
    return user
